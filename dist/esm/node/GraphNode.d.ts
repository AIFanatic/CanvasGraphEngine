import { Graph } from "../Graph";
import { GraphNodeConnection } from "./GraphNodeConnection";
import { GraphNodeInput } from "./slot/GraphNodeInput";
import { GraphNodeOutput } from "./slot/GraphNodeOutput";
import { INodeProperties } from "../interfaces/INodeProperties";
import { INodeWidget } from "../interfaces/INodeWidget";
import { NodeHeaderWidget } from "../widgets/NodeHeaderWidget";
import { IMouseEvent, MouseEventTypes } from "../interfaces/IMouseEvent";
export declare class GraphNode {
    graph: Graph;
    inputs: GraphNodeInput[];
    outputs: GraphNodeOutput[];
    widgets: INodeWidget[];
    properties: INodeProperties;
    header: NodeHeaderWidget;
    onTrigger(): void;
    onConnectionsChange(from: GraphNodeOutput, to: GraphNodeInput): void;
    onAdded(): void;
    onRemoved(): void;
    onMouseUp(event: IMouseEvent): void;
    onMouseDown(event: IMouseEvent): void;
    onMouseMove(event: IMouseEvent): void;
    onMouseWheel(event: IMouseEvent): void;
    constructor(graph: Graph, path: string, title?: string);
    addInput(name: string, type: string): GraphNodeInput;
    addOutput(name: string, type: string): GraphNodeOutput;
    removeInput(input: GraphNodeInput): void;
    removeOutput(output: GraphNodeOutput): void;
    addWidget(widget: INodeWidget): INodeWidget;
    removeWidget(widget: INodeWidget): void;
    triggerOutput(index: number): void;
    getInputData(index: number): any;
    getOutputData(index: number): any;
    setOutputData(index: number, data: any): void;
    connectInputToOutput(from: GraphNodeOutput, to: GraphNodeInput): GraphNodeConnection;
    connect(outputIndex: number, targetNode: GraphNode, inputIndex: number): GraphNodeConnection;
    isValidConnection(to: GraphNodeInput, from: GraphNodeOutput): boolean;
    removeConnection(connection: GraphNodeConnection): void;
    disconnectInput(index: number): void;
    disconnectOutput(index: number, targetNode?: GraphNode): void;
    private calculateNodeSize;
    private calculateSlotsSize;
    private calculateWidgetsSize;
    drawConnections(ctx: CanvasRenderingContext2D): void;
    draw(ctx: CanvasRenderingContext2D): void;
    onMouseEvent: (event: IMouseEvent, type: MouseEventTypes) => void;
}
